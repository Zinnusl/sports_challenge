// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: challenge.proto
// Protobuf C++ Version: 4.26.0-dev

#include "challenge.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace proto {

inline constexpr Data3d::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Data3d::Data3d(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Data3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Data3dDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Data3dDefaultTypeInternal() {}
  union {
    Data3d _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Data3dDefaultTypeInternal _Data3d_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        sensorid_{::uint64_t{0u}},
        timestamp_usec_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_challenge_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_challenge_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_challenge_2eproto = nullptr;
const ::uint32_t
    TableStruct_challenge_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::proto::Data3d, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::proto::Data3d, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::proto::Data3d, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::proto::Data3d, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::proto::Data3d, _impl_.z_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::proto::Position, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::proto::Position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::proto::Position, _impl_.sensorid_),
        PROTOBUF_FIELD_OFFSET(::proto::Position, _impl_.timestamp_usec_),
        PROTOBUF_FIELD_OFFSET(::proto::Position, _impl_.position_),
        1,
        2,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::proto::Data3d)},
        {14, 25, -1, sizeof(::proto::Position)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::proto::_Data3d_default_instance_._instance,
    &::proto::_Position_default_instance_._instance,
};
const char descriptor_table_protodef_challenge_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017challenge.proto\022\005proto\")\n\006Data3d\022\t\n\001x\030"
    "\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"U\n\010Position\022"
    "\020\n\010sensorId\030\001 \002(\004\022\026\n\016timestamp_usec\030\002 \002("
    "\004\022\037\n\010position\030\003 \002(\0132\r.proto.Data3d"
};
static ::absl::once_flag descriptor_table_challenge_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_challenge_2eproto = {
    false,
    false,
    154,
    descriptor_table_protodef_challenge_2eproto,
    "challenge.proto",
    &descriptor_table_challenge_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_challenge_2eproto::offsets,
    file_level_metadata_challenge_2eproto,
    file_level_enum_descriptors_challenge_2eproto,
    file_level_service_descriptors_challenge_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_challenge_2eproto_getter() {
  return &descriptor_table_challenge_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_challenge_2eproto(&descriptor_table_challenge_2eproto);
namespace proto {
// ===================================================================

class Data3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Data3d>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Data3d, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Data3d::Data3d(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.Data3d)
}
Data3d::Data3d(
    ::google::protobuf::Arena* arena, const Data3d& from)
    : Data3d(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Data3d::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Data3d::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Data3d::~Data3d() {
  // @@protoc_insertion_point(destructor:proto.Data3d)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Data3d::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Data3d::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          Data3d::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(Data3d, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Data3d::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Data3d)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Data3d::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Data3d::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Data3d, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Data3d_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto::Data3d>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Data3d, _impl_.x_)}},
    // required float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Data3d, _impl_.y_)}},
    // required float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Data3d, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float x = 1;
    {PROTOBUF_FIELD_OFFSET(Data3d, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 2;
    {PROTOBUF_FIELD_OFFSET(Data3d, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float z = 3;
    {PROTOBUF_FIELD_OFFSET(Data3d, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Data3d::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Data3d)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Data3d)
  return target;
}

::size_t Data3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Data3d)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // required float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Data3d::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Data3d*>(&to_msg);
  auto& from = static_cast<const Data3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Data3d)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Data3d::CopyFrom(const Data3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Data3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Data3d::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Data3d::InternalSwap(Data3d* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data3d, _impl_.z_)
      + sizeof(Data3d::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Data3d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Data3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_challenge_2eproto_getter, &descriptor_table_challenge_2eproto_once,
      file_level_metadata_challenge_2eproto[0]);
}
// ===================================================================

class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Position, _impl_._has_bits_);
  static void set_has_sensorid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::Data3d& position(const Position* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::proto::Data3d& Position::_Internal::position(const Position* msg) {
  return *msg->_impl_.position_;
}
Position::Position(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.Position)
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Position::Position(
    ::google::protobuf::Arena* arena,
    const Position& from)
    : ::google::protobuf::Message(arena) {
  Position* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::proto::Data3d>(
                              arena, *from._impl_.position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sensorid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sensorid_),
           offsetof(Impl_, timestamp_usec_) -
               offsetof(Impl_, sensorid_) +
               sizeof(Impl_::timestamp_usec_));

  // @@protoc_insertion_point(copy_constructor:proto.Position)
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, timestamp_usec_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::timestamp_usec_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:proto.Position)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Position::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Position::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          Position::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(Position, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Position)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.sensorid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_usec_) -
        reinterpret_cast<char*>(&_impl_.sensorid_)) + sizeof(_impl_.timestamp_usec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Position::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Position::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Position, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Position_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::proto::Position>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required uint64 sensorId = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Position, _impl_.sensorid_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.sensorid_)}},
    // required uint64 timestamp_usec = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Position, _impl_.timestamp_usec_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.timestamp_usec_)}},
    // required .proto.Data3d position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint64 sensorId = 1;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.sensorid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // required uint64 timestamp_usec = 2;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.timestamp_usec_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // required .proto.Data3d position = 3;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::proto::Data3d>()},
  }}, {{
  }},
};

::uint8_t* Position::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Position)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 sensorId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sensorid(), target);
  }

  // required uint64 timestamp_usec = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp_usec(), target);
  }

  // required .proto.Data3d position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Position)
  return target;
}

::size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Position)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // required .proto.Data3d position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // required uint64 sensorId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sensorid());
    }

    // required uint64 timestamp_usec = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp_usec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Position::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::proto::Data3d>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
      _this->_impl_._has_bits_[0] |= 0x00000001u;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sensorid_ = from._impl_.sensorid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_usec_ = from._impl_.timestamp_usec_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Position::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.position_->IsInitialized()) return false;
  }
  return true;
}

void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.timestamp_usec_)
      + sizeof(Position::_impl_.timestamp_usec_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_challenge_2eproto_getter, &descriptor_table_challenge_2eproto_once,
      file_level_metadata_challenge_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
